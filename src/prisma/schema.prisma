// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                    String    @id @default(cuid())
  firstname              String?
  lastname               String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  role                  String?    @default("entrepreneur")
  password              String?
  lockedAt              DateTime?
  invalidLoginAttempts  Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  projectApplicationId String?
  projectApplication   ProjectApplication? @relation(fields: [projectApplicationId], references: [id], onDelete: Cascade)

  accounts Account[]
  sessions Session[]
  profile  Profile?
  teamMember TeamMember?
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  location    String?
  website     String?
  twitter     String?
  github      String?
  linkedin    String?
  avatar      String?
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 

model ProjectApplication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Paso 0: Selección de Programa
  programType String? // inqubalab, idea-feedback, aceleracion

  // Paso 1: Datos Generales
  projectName   String?
  website       String?
  category      String? // tech, noTech
  industry      String? // ambiental, agricultura, biotecnologia, etc.
  description   String?
  ruc           String?
  foundingYear  String?

  // Paso 2: Impacto y Origen
  opportunityValue String?
  stage            String? // ideaNegocio, mvp
  projectOrigin    String? // proyectoCurso, proyectoTesis, ideaEmprendimiento, inqubalab
  problem          String?
  customerProfile  String?
  impact           String?

  // Paso 3: Presentación
  videoUrl        String?
  videoFileName   String? // Para almacenar el nombre del archivo subido
  specificSupport String?

  // Paso 4: Equipo
  howMet String? // Solo requerido si hay 2+ miembros
  source String?  // redesSociales, amigos, familia, universidad, eventos, internet, otros

  // Paso 5: Preferencias Personales
  favoriteSport      String? // futbol, basketball, natacion, voleibol
  favoriteHobby      String? // lectura, musica, videojuegos, cocinar, viajar, fotografia, pintura, bailar, escribir, otro
  favoriteMovieGenre String? // accion, aventura, cienciaFiccion, comedia, drama, fantasia, suspense, terror

  // Paso 6: Consentimiento
  privacyConsent Boolean?

  onboardingStep String?

  projectStatus String? // 
  isCompleted Boolean? @default(false)

  completedAt DateTime?



  // Relación con integrantes del equipo
  teamMembers TeamMember[]
  users User[]
  projectStatusLogs ProjectStatusLog[]

  @@map("project_applications")
}

model ProjectStatusLog {
  id String @id @default(cuid())
  projectApplicationId String
  projectApplication ProjectApplication @relation(fields: [projectApplicationId], references: [id], onDelete: Cascade)

  status String
  createdAt DateTime @default(now())

  @@map("project_status_logs")
}

model TeamMember {
  id String @id @default(cuid())

  // Información personal
  firstName String
  lastName String
  dni      String?

  // User
  userId String? @unique
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Información académica
  studentCode String? // Requerido para universidades Laureate
  career      String?
  cycle       String? // Requerido para universidades Laureate

  // Información de contacto
  phone           String?
  universityEmail String? // Requerido para universidades Laureate
  contactEmail    String
  linkedin        String?

  // Universidad
  university      String? // unmsm, pucp, ulima, up, udep, uch, utec, upc, upn, usil, esan, cibertec, otras
  otherUniversity String? // Requerido cuando university = "otras"

  // Relación con la aplicación
  projectApplication   ProjectApplication @relation(fields: [projectApplicationId], references: [id], onDelete: Cascade)
  projectApplicationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

//programs
model Program {
  id String @id @default(cuid())
  name String
  description String
  programType String
  programStatus String
  year String? // 2025, 2026, etc
  cohortCode String? // 2025-1, 2025-2, 2025-3, etc
  startDate DateTime?
  endDate DateTime?
  status String? // draft, published, inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  programStatusLogs ProgramStatusLog[]

  @@map("programs")
}

model ProgramStatusLog {
  id String @id @default(cuid())
  programId String
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  status String
  createdAt DateTime @default(now())

  @@map("program_status_logs")
}


